#!/bin/bash

set -e

if [[ -n "${PFB_DEBUG}" ]]; then
    set -x
fi

set -u

DIR="$(dirname "$0")"

function usage() {
    echo -n \
"Usage: $(basename "$0") COMMAND OPTION[S]
Execute Terraform subcommands with remote state management.
"
}

function update_batch_definitions() {
    echo "Updating AWS Batch job definitions"
    pushd "../aws-batch"
    # TODO: Only trigger this if the pfb-analysis container has changed, otherwise skip
    #       and reuse old version
    # TODO: This is a bit awkward. If we `plan` but never `apply`, we'll have created
    #       an orphaned job definition that never gets used.
    docker-compose build

    ENVIRONMENT="${ENVIRONMENT:-staging}"
    BATCH_ANALYSIS_JOB_NAME_REVISION=$(docker-compose run --rm \
        update-job-defs \
        "${ENVIRONMENT}-pfb-analysis-run-job.json" \
        "${PFB_AWS_ECR_ENDPOINT}/pfb-analysis:${GIT_COMMIT}")

    echo "Analysis Task Name:Revision -- ${BATCH_ANALYSIS_JOB_NAME_REVISION}"
    popd
}


if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        TERRAFORM_DIR="${DIR}/../deployment/terraform"
        echo
        echo "Attempting to deploy application version [${GIT_COMMIT}]..."
        echo "-----------------------------------------------------"
        echo
    fi

    if [[ -n "${PFB_SETTINGS_BUCKET}" ]]; then
        pushd "${TERRAFORM_DIR}"

        aws s3 cp "s3://${PFB_SETTINGS_BUCKET}/terraform/terraform.tfvars" "${PFB_SETTINGS_BUCKET}.tfvars"

        case "${1}" in
            plan)
                update_batch_definitions

                docker-compose run --rm \
                    --entrypoint rm \
                    terraform -rf .terraform/ terraform.tfstate*

                docker-compose run --rm \
                    terraform init \
                    -backend-config="bucket=${PFB_SETTINGS_BUCKET}" \
                    -backend-config="key=terraform/state"

                docker-compose run --rm \
                    terraform plan \
                          -var-file="${PFB_SETTINGS_BUCKET}.tfvars" \
                          -var="git_commit=${GIT_COMMIT}" \
                          -var="batch_analysis_job_definition_name_revision=${BATCH_ANALYSIS_JOB_NAME_REVISION}" \
                          -out="${PFB_SETTINGS_BUCKET}.tfplan"
                ;;
            apply)
                docker-compose run --rm terraform apply "${PFB_SETTINGS_BUCKET}.tfplan"

                # TODO (#843): Restore this once we've gotten Tilegarden deployment working again
                # popd
                # pushd "${DIR}/.."

                # aws s3 cp "s3://${PFB_SETTINGS_BUCKET}/tilegarden/.env" "./src/tilegarden/.env"
                # aws s3 cp "s3://${PFB_SETTINGS_BUCKET}/tilegarden/claudia.json" "./src/tilegarden/claudia/claudia.json"

                # docker-compose \
                #     -f docker-compose.yml \
                #     -f docker-compose.test.yml \
                #     run --rm --entrypoint yarn tilegarden deploy
                ;;
            plan-mgmt)
                update_batch_definitions

                docker-compose run --rm \
                    --entrypoint rm \
                    terraform -rf .terraform/ terraform.tfstate*

                docker-compose run --rm \
                    terraform init \
                    -backend-config="bucket=${PFB_SETTINGS_BUCKET}" \
                    -backend-config="key=terraform/state"

                docker-compose run --rm \
                    terraform plan \
                          -var-file="${PFB_SETTINGS_BUCKET}.tfvars" \
                          -var="git_commit=\"${GIT_COMMIT}\"" \
                          -var="batch_analysis_job_definition_name_revision=${BATCH_ANALYSIS_JOB_NAME_REVISION}" \
                          -target=aws_ecs_task_definition.pfb_app_management \
                          -out="${PFB_SETTINGS_BUCKET}-mgmt.tfplan"
                ;;
            apply-mgmt)
                docker-compose run --rm terraform apply "${PFB_SETTINGS_BUCKET}-mgmt.tfplan"
                ;;
            *)
                echo "ERROR: I don't have support for that Terraform subcommand!"
                exit 1
                ;;
        esac

        popd
    else
        echo "ERROR: No PFB_SETTINGS_BUCKET variable defined."
        exit 1
    fi
fi
